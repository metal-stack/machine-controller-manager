// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/metal-pod/metal-go/api/models"
)

// AcquireChildNetworkReader is a Reader for the AcquireChildNetwork structure.
type AcquireChildNetworkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcquireChildNetworkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 201:
		result := NewAcquireChildNetworkCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 409:
		result := NewAcquireChildNetworkConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAcquireChildNetworkDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAcquireChildNetworkCreated creates a AcquireChildNetworkCreated with default headers values
func NewAcquireChildNetworkCreated() *AcquireChildNetworkCreated {
	return &AcquireChildNetworkCreated{}
}

/*AcquireChildNetworkCreated handles this case with default header values.

Created
*/
type AcquireChildNetworkCreated struct {
	Payload *models.V1NetworkResponse
}

func (o *AcquireChildNetworkCreated) Error() string {
	return fmt.Sprintf("[POST /v1/network/acquire][%d] acquireChildNetworkCreated  %+v", 201, o.Payload)
}

func (o *AcquireChildNetworkCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V1NetworkResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcquireChildNetworkConflict creates a AcquireChildNetworkConflict with default headers values
func NewAcquireChildNetworkConflict() *AcquireChildNetworkConflict {
	return &AcquireChildNetworkConflict{}
}

/*AcquireChildNetworkConflict handles this case with default header values.

Conflict
*/
type AcquireChildNetworkConflict struct {
	Payload *models.HttperrorsHTTPErrorResponse
}

func (o *AcquireChildNetworkConflict) Error() string {
	return fmt.Sprintf("[POST /v1/network/acquire][%d] acquireChildNetworkConflict  %+v", 409, o.Payload)
}

func (o *AcquireChildNetworkConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HttperrorsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcquireChildNetworkDefault creates a AcquireChildNetworkDefault with default headers values
func NewAcquireChildNetworkDefault(code int) *AcquireChildNetworkDefault {
	return &AcquireChildNetworkDefault{
		_statusCode: code,
	}
}

/*AcquireChildNetworkDefault handles this case with default header values.

Error
*/
type AcquireChildNetworkDefault struct {
	_statusCode int

	Payload *models.HttperrorsHTTPErrorResponse
}

// Code gets the status code for the acquire child network default response
func (o *AcquireChildNetworkDefault) Code() int {
	return o._statusCode
}

func (o *AcquireChildNetworkDefault) Error() string {
	return fmt.Sprintf("[POST /v1/network/acquire][%d] acquireChildNetwork default  %+v", o._statusCode, o.Payload)
}

func (o *AcquireChildNetworkDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.HttperrorsHTTPErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
